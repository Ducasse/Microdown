Class {
	#name : #MicInlineParser2Test,
	#superclass : #TestCase,
	#pools : [
		'MicMicrodownSharedPool'
	],
	#category : #'Microdown-Tests-InlineParser'
}

{ #category : #'as yet unclassified' }
MicInlineParser2Test class >> generateEvaluatedTests [
	| template tests|
	template := 'test{1}
	"Auto generated by self class>>#generateEvaluatedTests"
	| res |
	res := ( self inlineParse:{2}) first.
	self assert: res printString equals: ({3} new children: \{ MicTextBlock2 new substring: ''aaaa''\}) printString
	'.
	tests := { 
		{ 'Bold'. (BoldMarkup, 'aaaa', BoldMarkup) printString. 'MicBoldFormatBlock2'}.
		{ 'Italic'. (ItalicMarkup, 'aaaa', ItalicMarkup) printString. 'MicItalicFormatBlock2' }.
		{ 'Strike'. (StrikeMarkup, 'aaaa', StrikeMarkup) printString. 'MicStrikeFormatBlock2'  }
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : #'as yet unclassified' }
MicInlineParser2Test class >> generateEvaluatedTests_BackslashNotNested [
	| template tests|
	template := 'test{1}_BackslashNotNested
	"Auto generated by self class>>#generateEvaluatedTests_BackslashNotNested"
	| res |
	res := ( self inlineParse:{2}) first.
	self assert: res printString equals: ({3} new children: \{
		MicTextBlock2 new substring: ''{4}'' \}) printString
	'.
	tests := { 
		{ 'Bold'. (BoldMarkup, 'aa\',ItalicMarkup, 'bbbb', ItalicMarkup,'cc', BoldMarkup) printString. 
				'MicBoldFormatBlock2'. 'aa',ItalicMarkup, 'bbbb', ItalicMarkup,'cc' }.
		{ 'Italic'. (ItalicMarkup, 'aa\',StrikeMarkup , 'bbbb', StrikeMarkup ,'cc', ItalicMarkup) printString. 
				'MicItalicFormatBlock2'. 'aa',StrikeMarkup , 'bbbb', StrikeMarkup ,'cc'  }.
		{  'Strike'.(StrikeMarkup, 'aa\',BoldMarkup , 'bbbb', BoldMarkup,'cc', StrikeMarkup) printString. 
			'MicStrikeFormatBlock2'. 'aa',BoldMarkup , 'bbbb', BoldMarkup,'cc' }
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : #'as yet unclassified' }
MicInlineParser2Test class >> generateEvaluatedTests_Nested [
	| template tests|
	template := 'test{1}_Nested
	"Auto generated by self class>>#generateEvaluatedTests_Nested"
	| res |
	res := ( self inlineParse:{2}) first.
	self assert: res printString equals: ({3} new children: \{
		MicTextBlock2 new substring: ''aa''.
		{4} new children: \{ MicTextBlock2 new substring: ''bbbb''\}.
		MicTextBlock2 new substring: ''cc''
		\}) printString
	'.
	tests := { 
		{ 'Bold'. (BoldMarkup, 'aa',(ItalicMarkup, 'bbbb', ItalicMarkup),'cc', BoldMarkup) printString. 
				'MicBoldFormatBlock2'. 'MicItalicFormatBlock2' }.
		{ 'Italic'. (ItalicMarkup, 'aa',(StrikeMarkup , 'bbbb', StrikeMarkup ),'cc', ItalicMarkup) printString. 
				'MicItalicFormatBlock2'. 'MicStrikeFormatBlock2'  }.
		{  'Strike'.(StrikeMarkup, 'aa',(BoldMarkup , 'bbbb', BoldMarkup),'cc', StrikeMarkup) printString. 
			'MicStrikeFormatBlock2'. MicBoldFormatBlock2 }
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : #'as yet unclassified' }
MicInlineParser2Test class >> generateEvaluatedTests_UnclompletedNested [
	| template tests|
	template := 'test{1}_BackslashNotNested
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"
	| res |
	res := ( self inlineParse:{2}) first.
	self assert: res printString equals: ({3} new children: \{
		MicTextBlock2 new substring: {4} \}) printString
	'.
	tests := { 
		{ 'Bold'. (BoldMarkup, 'aa',ItalicMarkup, 'bbbbcc', BoldMarkup) printString. 
				'MicBoldFormatBlock2'. ('aa',ItalicMarkup, 'bbbbcc') printString}.
		{ 'Italic'. (ItalicMarkup, 'aa',StrikeMarkup , 'bbbbcc', ItalicMarkup) printString. 
				'MicItalicFormatBlock2'. ('aa',StrikeMarkup , 'bbbbcc') printString}.
		{  'Strike'.(StrikeMarkup, 'aa',BoldMarkup , 'bbbbcc', StrikeMarkup) printString. 
			'MicStrikeFormatBlock2'. ('aa',BoldMarkup , 'bbbbcc') printString}
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : #'as yet unclassified' }
MicInlineParser2Test class >> generateUrlTests [
	| template tests|
	template := 'test{1}
	"Auto generated by self class>>#generateUrlTests"
	| res |
	res := ( self inlineParse: {2}) first.
	self assert: res printString equals: (
		Mic{1}Block2 new 
			children: \{ MicTextBlock2 new substring: ''aaaa''\}; url: ''bbb'' ) printString'.
	tests := { 
		{ 'Link'. (LinkNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
		{ 'Figure'. (FigureNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : #'as yet unclassified' }
MicInlineParser2Test class >> generateUrlTests_Refs [
	| template tests|
	template := 'test{1}_Refs
	"Auto generated by self class>>#generateUrlTests_Refs"
	| res |
	res := ( self inlineParse: {2}) first.
	self assert: res reference class equals: MicRelativeResourceReference.
	self assert: res reference path equals: ''bbb'' '.
	tests := { 
		{ 'Link'. (LinkNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
		{ 'Figure'. (FigureNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : #public }
MicInlineParser2Test >> inlineParse: string [
	^ MicInlineParser2 parse: string
]

{ #category : #tests }
MicInlineParser2Test >> testAnchor [
	| res |
	res := self inlineParse: (AnchorReferenceOpenerMarkup ,'bbbb', AnchorReferenceCloserMarkup ).
	self assert: res first printString equals: 'AnchorReference(bbbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testAnchor_backSlashed [
	| res |
	res := self inlineParse: (AnchorReferenceOpenerMarkup ,'bb\xccc\', AnchorReferenceCloserMarkup,'cccbb', AnchorReferenceCloserMarkup ).
	self assert: res first printString equals: 'AnchorReference(bb\xccc@*cccbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testAnchor_unevaluated [
	| res |
	res := self inlineParse: (AnchorReferenceOpenerMarkup ,'bb**ccc**bb', AnchorReferenceCloserMarkup ).
	self assert: res first printString equals: 'AnchorReference(bb**ccc**bb)'
]

{ #category : #tests }
MicInlineParser2Test >> testAnnotation [
	| res |
	res := self inlineParse: (AnnotationOpenerMarkup  ,'bbbb', AnnotationCloserMarkup  ).
	self assert: res first printString equals: 'Annotation(bbbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testAnnotation_backSlashed [
	| res |
	res := self inlineParse: (AnnotationOpenerMarkup  ,'bb\xccc\', AnnotationCloserMarkup ,'cccbb', AnnotationCloserMarkup ).
	self assert: res first printString equals: 'Annotation(bb\xccc!}cccbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testAnnotation_unevaluated [
	| res |
	res := self inlineParse: (AnnotationOpenerMarkup  ,'bb**ccc**bb', AnnotationCloserMarkup  ).
	self assert: res first printString equals: 'Annotation(bb**ccc**bb)'
]

{ #category : #'test generated' }
MicInlineParser2Test >> testBold [
	"Auto generated by self class>>#generateEvaluatedTests"
	| res |
	res := ( self inlineParse:'**aaaa**') first.
	self assert: res printString equals: (MicBoldFormatBlock2 new children: { MicTextBlock2 new substring: 'aaaa'}) printString
	
]

{ #category : #'test generated' }
MicInlineParser2Test >> testBold_BackslashNotNested [
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"
	| res |
	res := ( self inlineParse:'**aa_bbbbcc**') first.
	self assert: res printString equals: (MicBoldFormatBlock2 new children: {
		MicTextBlock2 new substring: 'aa_bbbbcc' }) printString
	
]

{ #category : #'test generated' }
MicInlineParser2Test >> testBold_Nested [
	"Auto generated by self class>>#generateEvaluatedTests"
	| res |
	res := ( self inlineParse:'**aa_bbbb_cc**') first.
	self assert: res printString equals: (MicBoldFormatBlock2 new children: {
		MicTextBlock2 new substring: 'aa'.
		MicItalicFormatBlock2 new children: { MicTextBlock2 new substring: 'bbbb'}.
		MicTextBlock2 new substring: 'cc'
		}) printString
	
]

{ #category : #'test generated' }
MicInlineParser2Test >> testFigure [
	"Auto generated by self class>>#generateUrlTests"
	| res |
	res := ( self inlineParse: '![aaaa](bbb)') first.
	self assert: res printString equals: (
		MicFigureBlock2 new 
			children: { MicTextBlock2 new substring: 'aaaa'}; url: 'bbb' ) printString
]

{ #category : #'test generated' }
MicInlineParser2Test >> testFigure_Refs [
	"Auto generated by self class>>#generateUrlTests_Refs"
	| res |
	res := ( self inlineParse: '![aaaa](bbb)') first.
	self assert: res reference class equals: MicRelativeResourceReference.
	self assert: res reference path equals: 'bbb' 
]

{ #category : #'test generated' }
MicInlineParser2Test >> testItalic [
	"Auto generated by self class>>#generateEvaluatedTests"
	| res |
	res := ( self inlineParse:'_aaaa_') first.
	self assert: res printString equals: (MicItalicFormatBlock2 new children: { MicTextBlock2 new substring: 'aaaa'}) printString
	
]

{ #category : #'test generated' }
MicInlineParser2Test >> testItalic_BackslashNotNested [
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"
	| res |
	res := ( self inlineParse:'_aa~bbbbcc_') first.
	self assert: res printString equals: (MicItalicFormatBlock2 new children: {
		MicTextBlock2 new substring: 'aa~bbbbcc' }) printString
	
]

{ #category : #'test generated' }
MicInlineParser2Test >> testLink [
	"Auto generated by self class>>#generateUrlTests"
	| res |
	res := ( self inlineParse: '[aaaa](bbb)') first.
	self assert: res printString equals: (
		MicLinkBlock2 new 
			children: { MicTextBlock2 new substring: 'aaaa'}; url: 'bbb' ) printString
]

{ #category : #'test generated' }
MicInlineParser2Test >> testLink_Refs [
	"Auto generated by self class>>#generateUrlTests_Refs"
	| res |
	res := ( self inlineParse: '[aaaa](bbb)') first.
	self assert: res reference class equals: MicRelativeResourceReference.
	self assert: res reference path equals: 'bbb' 
]

{ #category : #tests }
MicInlineParser2Test >> testMath [
	| res |
	res := self inlineParse: (MathMarkup  ,'bbbb', MathMarkup).
	self assert: res first printString equals: 'MathInline(bbbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testMath_backSlashed [
	| res |
	res := self inlineParse: (MathMarkup, 'bb\xccc\', MathMarkup, 'cccbb', MathMarkup ).
	self assert: res first printString equals: 'MathInline(bb\xccc$cccbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testMath_unevaluated [
	| res |
	res := self inlineParse: (MathMarkup  ,'bb**cccc**bb', MathMarkup).
	self assert: res first printString equals: 'MathInline(bb**cccc**bb)'
]

{ #category : #tests }
MicInlineParser2Test >> testMonospace [
	| res |
	res := self inlineParse: (MonospaceMarkup ,'bbbb', MonospaceMarkup).
	self assert: res first printString equals: 'Monospace(bbbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testMonospace_backSlashed [
	| res |
	res := self inlineParse: (MonospaceMarkup, 'bb\xccc\', MonospaceMarkup, 'cccbb', MonospaceMarkup ).
	self assert: res first printString equals: 'Monospace(bb\xccc`cccbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testMonospace_unevaluated [
	| res |
	res := self inlineParse: (MonospaceMarkup ,'bb**cccc**bb', MonospaceMarkup).
	self assert: res first printString equals: 'Monospace(bb**cccc**bb)'
]

{ #category : #tests }
MicInlineParser2Test >> testRaw [
	| res |
	res := self inlineParse: (RawOpenerMarkup ,'bbbb', RawCloserMarkup).
	self assert: res first printString equals: 'Raw(bbbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testRaw_backSlashed [
	| res |
	res := self inlineParse: (RawOpenerMarkup , 'bb\xccc\', RawCloserMarkup , 'cccbb', RawCloserMarkup ).
	self assert: res first printString equals: 'Raw(bb\xccc}}cccbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testRaw_unevaluated [
	| res |
	res := self inlineParse: (RawOpenerMarkup ,'bb**cccc**bb', RawCloserMarkup).
	self assert: res first printString equals: 'Raw(bb**cccc**bb)'
]

{ #category : #'test generated' }
MicInlineParser2Test >> testStrike [
	"Auto generated by self class>>#generateEvaluatedTests"
	| res |
	res := ( self inlineParse:'~aaaa~') first.
	self assert: res printString equals: (MicStrikeFormatBlock2 new children: { MicTextBlock2 new substring: 'aaaa'}) printString
	
]

{ #category : #'test generated' }
MicInlineParser2Test >> testStrike_BackslashNotNested [
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"
	| res |
	res := ( self inlineParse:'~aa**bbbbcc~') first.
	self assert: res printString equals: (MicStrikeFormatBlock2 new children: {
		MicTextBlock2 new substring: 'aa**bbbbcc' }) printString
	
]

{ #category : #tests }
MicInlineParser2Test >> testText [
	| res |
	res := self inlineParse: 'bbbb'.
	self assert: res first printString equals: 'Text(bbbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testText_backSlashed [
	| res |
	res := self inlineParse: 'bb\xbb'.
	self assert: res first printString equals: 'Text(bbxbb)'
]

{ #category : #tests }
MicInlineParser2Test >> testText_isEvaluated [
	| res |
	res := self inlineParse: 'bb**cccc**bb'.
	self assert: res printString equals: 'an Array(Text(bb) Bold{ Text(cccc) } Text(bb))'
]
