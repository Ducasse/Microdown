Class {
	#name : #MicCSSFileTest,
	#superclass : #TestCase,
	#instVars : [
		'fileRef'
	],
	#category : #'Microdown-HTMLExporter-Tests-CSS'
}

{ #category : #accessing }
MicCSSFileTest >> fileRef [
	" Answer the fileRef of this MicCSSFileTest "

	^ fileRef
]

{ #category : #accessing }
MicCSSFileTest >> fileRef: anObject [
	" Sets the fileRef of this MicCSSFileTest "

	fileRef := anObject
]

{ #category : #running }
MicCSSFileTest >> resources [

	^ Array with: MicCSSFileResource
]

{ #category : #running }
MicCSSFileTest >> setUp [

	super setUp.
	fileRef := MicCSSFileResource current micCSSFile
]

{ #category : #autogenerated }
MicCSSFileTest >> testBasename [

	self assert: (fileRef basename isKindOf: String).
	self assert: fileRef basename equals: 'sample.css'
]

{ #category : #autogenerated }
MicCSSFileTest >> testContents [

	self assert: (fileRef contents isKindOf: String).
	self deny: fileRef contents isEmpty.
]

{ #category : #autogenerated }
MicCSSFileTest >> testFileReference [

	self assert: (fileRef fileReference isKindOf: FileReference).
	self assert: (fileRef fileReference basename endsWith: 'css')
]

{ #category : #autogenerated }
MicCSSFileTest >> testFullName [

	self assert: (fileRef fullName isKindOf: String).
	self assert: fileRef fullName equals: '/css/sample.css'
]

{ #category : #autogenerated }
MicCSSFileTest >> testRelativePath [

	self assert: (fileRef relativePath isKindOf: String).
	self assert: fileRef relativePath equals: '/css/sample.css'
]
