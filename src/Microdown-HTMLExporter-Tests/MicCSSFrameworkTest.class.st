Class {
	#name : 'MicCSSFrameworkTest',
	#superclass : 'TestCase',
	#instVars : [
		'cssFramework'
	],
	#category : 'Microdown-HTMLExporter-Tests-CSS',
	#package : 'Microdown-HTMLExporter-Tests',
	#tag : 'CSS'
}

{ #category : 'accessing' }
MicCSSFrameworkTest >> cssFramework [
	" Answer the cssFramework of this MicCSSFrameworkTest "

	^ cssFramework
]

{ #category : 'accessing' }
MicCSSFrameworkTest >> cssFramework: anObject [
	" Sets the cssFramework of this MicCSSFrameworkTest "

	cssFramework := anObject
]

{ #category : 'helpers' }
MicCSSFrameworkTest >> newMicCssTheme [

	| cssUrl minCssUrl destPath |
	
	cssUrl := 'http://example.st/css/style.css'.
	minCssUrl := 'http://example.st/css/style.min.css'.
	destPath := FileSystem workingDirectory.
	^ MicCSSTheme new
		framework: self cssFramework;
		name: 'MockTheme';
		cssUrl: cssUrl;
		minCssUrl: minCssUrl;
		cssFile: (MicCSSFile new
			fileReference: (destPath asFileReference / cssUrl asZnUrl filename);
			yourself);
		minCssFile: (MicCSSFile new
			fileReference: (destPath asFileReference / minCssUrl asZnUrl filename);
			yourself)
		yourself
]

{ #category : 'helpers' }
MicCSSFrameworkTest >> newMicCssThemeInfo [

	^ Dictionary new
		at: #name put: 'MockTheme';
		at: #cssUrl put: 'http://example.st/css/style.css';
		at: #minCss put: 'http://example.st/css/style.min.css';
		yourself.
]

{ #category : 'running' }
MicCSSFrameworkTest >> setUp [

	super setUp.
	cssFramework := MicCSSFramework new
			name: 'MockFramework';
			yourself.
]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testAddTheme [

	self cssFramework addTheme: self newMicCssTheme.
	self assert: cssFramework hasThemes.
	self
		   assert: cssFramework class
		   equals: MicCSSFramework.
   self assert: cssFramework hasMinifiedThemes.
   self assert: cssFramework name equals: 'MockFramework'.
   self assert: cssFramework minCssFile isNil.
   self assert: cssFramework fonts isEmpty.
   self assert: cssFramework resetUrl isEmpty.
   self assert: cssFramework projectUrl isEmpty.
   self assert: cssFramework hasNormalThemes.
   self assert: cssFramework hasThemes.
   self assert: cssFramework cssUrl isNil.
   self deny: cssFramework hasMinifiedVersion
]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testFonts [

	self assert: (cssFramework fonts isKindOf: Collection).

]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testHasMinifiedThemes [

	self assert: (cssFramework hasMinifiedThemes isKindOf: Boolean).

]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testHasNormalThemes [

	self assert: (cssFramework hasNormalThemes isKindOf: Boolean).

]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testHasThemes [

	self assert: (cssFramework hasThemes isKindOf: Boolean).
	self deny: cssFramework hasThemes.
	
	cssFramework addTheme: self newMicCssTheme.

	self assert: cssFramework hasThemes.
]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testNewCssTheme [

	self assert: ((cssFramework newCssTheme: self newMicCssThemeInfo) isKindOf: MicCSSTheme).
	self deny: cssFramework hasNormalThemes.
]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testNormalizeUrl [

	self assert: (cssFramework normalizeUrl isKindOf: String).

]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testProjectUrl [

	self assert: (cssFramework projectUrl isKindOf: String).

]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testResetUrl [

	self assert: (cssFramework resetUrl isKindOf: String).
]

{ #category : 'autogenerated' }
MicCSSFrameworkTest >> testThemes [

	| themes |

	themes := cssFramework themes.
	self assert: (themes isKindOf: Collection).
]
