Class {
	#name : 'MicCSSDownloaderTest',
	#superclass : 'TestCase',
	#instVars : [
		'cssDownloader'
	],
	#category : 'Microdown-HTMLExporter-Tests-CSS',
	#package : 'Microdown-HTMLExporter-Tests',
	#tag : 'CSS'
}

{ #category : 'accessing' }
MicCSSDownloaderTest >> cssDownloader [
	" Answer the cssDownloader of this MicCSSDownloaderTest "

	^ cssDownloader
]

{ #category : 'accessing' }
MicCSSDownloaderTest >> cssDownloader: anObject [
	" Sets the cssDownloader of this MicCSSDownloaderTest "

	cssDownloader := anObject
]

{ #category : 'running' }
MicCSSDownloaderTest >> setUp [

	super setUp.
	cssDownloader := MicCSSDownloader new 
		cssProvider: MicCSSProvider new;
		yourself.
]

{ #category : 'autogenerated' }
MicCSSDownloaderTest >> testCssProvider [

	self assert: (cssDownloader cssProvider isKindOf: MicCSSProvider).

]

{ #category : 'autogenerated' }
MicCSSDownloaderTest >> testDestinationPath [

	self assert: (cssDownloader destinationPath isKindOf: String).
	self deny: cssDownloader destinationPath isEmpty.

]

{ #category : 'autogenerated' }
MicCSSDownloaderTest >> testFrameworks [ 

	self assert: (cssDownloader frameworks isKindOf: Collection).

]

{ #category : 'autogenerated' }
MicCSSDownloaderTest >> testHttpClient [

	self assert: (cssDownloader httpClient isKindOf: ZnClient).

]
