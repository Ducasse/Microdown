"
I am an inline block generated by inline splitter, to parse inline text.

I am characterized by:
- start & end: locations of my opener & closer delimiters in initial string
- substring: concerned text (without delimiters so)
- kind: my type, symbol which must be the same than my relative delimiter type (#basic for normal text)
- children: array in case of nested inline blocks


"
Class {
	#name : #MicInlineBlock,
	#superclass : #MicElement,
	#category : #'Microdown-InlineParser'
}

{ #category : #accessing }
MicInlineBlock class >> blockName [
	^ (self instanceSide name asString withoutPrefix: 'Mic') withoutSuffix: 'Block'
]

{ #category : #accessing }
MicInlineBlock class >> closingDelimiter [
	^ self subclassResponsibility
]

{ #category : #testing }
MicInlineBlock class >> isEvaluated [
	^ true
]

{ #category : #accessing }
MicInlineBlock class >> openingDelimiter [
	^ self subclassResponsibility
]

{ #category : #visiting }
MicInlineBlock >> accept: dummy [
	"implemented in subclasses"
]

{ #category : #accessing }
MicInlineBlock >> blockName [
	^ self class blockName
]

{ #category : #visiting }
MicInlineBlock >> closeMe [
	"use for post parsing initialization"
]

{ #category : #accessing }
MicInlineBlock >> closingDelimiter [ 
	^ self class closingDelimiter
]

{ #category : #private }
MicInlineBlock >> inlineParserClass [

	^ MicInlineParser
]

{ #category : #accessing }
MicInlineBlock >> kind [
	"Should only be used for tests"
	self deprecated: 'use blockName instead' transformWith: '`@rec kind' -> '`@rec blockName asLowercase'.
	^ self blockName asLowercase 
]

{ #category : #accessing }
MicInlineBlock >> openingDelimiter [
	^ self class openingDelimiter
]
